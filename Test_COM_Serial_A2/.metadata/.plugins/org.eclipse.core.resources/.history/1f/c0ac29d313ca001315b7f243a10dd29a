
/**
 * \file
 * \brief Test illustrates usage of profile position control for brushed dc motor
 * \author Pavan Kanajar <pkanajar@synapticon.com>
 * \author Martin Schwarz <mschwarz@synapticon.com>
 * \version 0.9beta
 * \date 10/04/2014
 */

#include <xs1.h>
#include <platform.h>
#include <print.h>
#include <ioports.h>
#include <hall_server.h>
#include <qei_server.h>
#include <pwm_service_inv.h>
#include <brushed_dc_server.h>
#include "brushed_dc_client.h"
#include <refclk.h>
#include <velocity_ctrl_client.h>
#include <velocity_ctrl_server.h>
#include <internal_config.h>
#include <bldc_motor_config.h>
#include <drive_config.h>
#include <profile_control.h>
#include <position_ctrl_server.h>
#include "position_ctrl_client.h"
#include <qei_client.h>
#include <profile.h>
//#define ENABLE_xscope

#define IFM_TILE_NODE_0 3
#define IFM_TILE_NODE_1 7

on stdcore[IFM_TILE_NODE_0]: clock clk_adc_0 = XS1_CLKBLK_1;
on stdcore[IFM_TILE_NODE_0]: clock clk_pwm_0 = XS1_CLKBLK_REF;

on stdcore[IFM_TILE_NODE_1]: clock clk_adc_1 = XS1_CLKBLK_1;
on stdcore[IFM_TILE_NODE_1]: clock clk_pwm_1 = XS1_CLKBLK_REF;



/* Test Profile Position function */
void position_profile_test(chanend c_position_ctrl, chanend c_qei, chanend c_hall)
{
	int actual_position = 0;			// ticks
	int target_position = 4096;			// encoder ticks (limited by MAX_POSITION_LIMIT on bldc)
	int velocity 		= 300;			// rpm
	int acceleration 	= 100;			// rpm/s
	int deceleration 	= 100;     		// rpm/s
	int follow_error;
	timer t;

	hall_par hall_params;
	qei_par qei_params;
	init_qei_param(qei_params);
	init_hall_param(hall_params);

	/* Initialise Profile Limits for position profile generator and select position sensor */
	init_position_profile_limits(MAX_ACCELERATION, MAX_PROFILE_VELOCITY, qei_params, hall_params,
			SENSOR_USED, MAX_POSITION_LIMIT, MIN_POSITION_LIMIT);

	/* Set new target position for profile position control */
	set_profile_position(target_position, velocity, acceleration, deceleration, SENSOR_USED, c_position_ctrl);

	/* Read actual position from the Position Control Server */
	actual_position = get_position(c_position_ctrl);


/*	while(1)
	{
		actual_position = get_position(c_position_ctrl);
		follow_error = target_position - actual_position;
		wait_ms(1, 1, t);   1 ms wait
	}*/
}

int main(void)
{
	// Motor control channels
	chan c_qei_p1, c_qei_p2, c_qei_p3, c_qei_p4, c_qei_p5, c_hall_p6, c_qei_p6;		// qei channels
	chan c_hall_p1, c_hall_p2, c_hall_p3, c_hall_p4, c_hall_p5;						// hall channels
	chan c_voltage_p1, c_voltage_p2, c_voltage_p3, c_signal;						// motor drive channels
	chan c_pwm_ctrl, c_adctrig;														// pwm channels
	chan c_position_ctrl;															// position control channel
	chan c_watchdog; 																// watchdog channel

	par
	{

		/* Test Profile Position Client function*/
		on stdcore[0]:
		{
			par
			{

				{
				 position_profile_test(c_position_ctrl, c_qei_p5, c_hall_p5);		// test PPM on slave side
				}

				/* Position Control Loop */
				{
				 ctrl_par position_ctrl_params;
				 hall_par hall_params;
				 qei_par qei_params;

				 /* Initialize PID parameters for Position Control (defined in config/motor/bldc_motor_config.h) */
				 init_position_control_param(position_ctrl_params);

				 /* Initialize Sensor configuration parameters (defined in config/motor/bldc_motor_config.h) */
				 init_hall_param(hall_params);
				 init_qei_param(qei_params);

				 /* Control Loop */
				 position_control(position_ctrl_params, hall_params, qei_params, SENSOR_USED, c_hall_p2,
						 c_qei_p2, c_position_ctrl, c_voltage_p1);
				}
			}
		}

		/************************************************************
		 * IFM_CORE
		 ************************************************************/
		on stdcore[IFM_TILE]:
		{
			par
			{
				/* PWM Loop */
				do_pwm_inv_triggered(c_pwm_ctrl, c_adctrig, p_ifm_dummy_port,
						p_ifm_motor_hi, p_ifm_motor_lo, clk_pwm);

				/* Brushed Motor Drive loop */
				{
					bdc_loop(c_watchdog, c_signal, c_voltage_p1, c_voltage_p2, c_voltage_p3, c_pwm_ctrl,
							p_ifm_esf_rstn_pwml_pwmh, p_ifm_coastn, p_ifm_ff1, p_ifm_ff2);
				}

				/* Watchdog Server */
				run_watchdog(c_watchdog, p_ifm_wd_tick, p_ifm_shared_leds_wden);

				/* Hall Server */
				{
					hall_par hall_params;
					init_hall_param(hall_params);
					run_hall(c_hall_p1, c_hall_p2, c_hall_p3, c_hall_p4, c_hall_p5, c_hall_p6, p_ifm_hall, hall_params); // channel priority 1,2..5
				}

				/* QEI Server */

				{
					qei_par qei_params;
					init_qei_param(qei_params);
					run_qei(c_qei_p1, c_qei_p2, c_qei_p3, c_qei_p4, c_qei_p5, c_qei_p6, p_ifm_encoder, qei_params);  		 // channel priority 1,2..5
				}

			}
		}

	}

	return 0;
}
