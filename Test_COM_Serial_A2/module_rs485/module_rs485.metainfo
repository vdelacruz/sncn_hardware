-------------------------------------------------------------------------------
-- Descriptive metadata
-------------------------------------------------------------------------------

componentName = "xSOFTip RS485"
componentFullName = ""
alternativeNames = { }
componentDescription = "Single Fully featured RS485 Transceiver" 
componentVersion = "1v0"

-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------
configPoints =
{
  rs485InitialBaudRate =
  {
    short   = "Initial Baud Rate",
    long    = "Initial baud Setting on start-up. Can be changed dynamically later.",
    help    = "Bit time will be derived as XS1_TIMER_HZ / baud_rate;",
    units   = "Bits Per Second",
    type    = "int",
    resourceUsageFlags = {"noeffect"},
    min     = 1,
    max     = 1000000,
    default = 9600
  },
  rs485DataBits =
  {
    short   = "Initial Bits Per Character",
    long    = "Initial BPC Setting on start-up. Can be changed dynamically later.",
    help    = "",
    type    = "int",
    units   = "bits",
    resourceUsageFlags = {"noeffect"},
    max     = 9,
    min     = 7,
    default = 8
  },
  rs485InitialStopBits =
  {
    short   = "Inital Stop Bits",
    long    = "Initial stop bits Setting on start-up. Can be changed dynamically later",
    help    = "",
    type    = "int",
    units   = "bits",
    resourceUsageFlags = {"noeffect"},
    max     = 2,
    min     = 1,
    default = 1
  },
  rs485InitialParity =
  {
    short   = "Inital Parity Setting",
    long    = "Initial Parity Setting on start-up. Can be changed dynamically later",
    help    = "",
    type    = "string",
    units   = "",
    resourceUsageFlags = {"noeffect"},
    options = {"RS485_PARITY_NONE", "RS485_PARITY_EVEN", "RS485_PARITY_ODD"},
    default = "RS485_PARITY_EVEN"
  },
  rs485DirBit =
  {
    short   = "Dir polarity",
    long    = "Polarity of Direction Control",
    help    = "",
    type    = "string",
    units   = "",
    resourceUsageFlags = {"noeffect"},
    max     = 1,
    min     = 0,
    default = 0
  },
  rs485DataTimeout =
  {
    short   = "Timeout",
    long    = "Time data line must be idle before transmitter witll attempt to send",
    help    = "",
    type    = "string",
    units   = "",
    resourceUsageFlags = {"noeffect"},
    max     = 1,
    min     = 0,
    default = 0
  },
}

derivedValues = {}

ports = {
  p_rs485_data = {
    short   = "Data",
    long    = "RS 485 Data Pin",
    help    = "",
    width   = 1
  },
  p_rs485_dir = {
    short   = "Direction",
    long    = "RS 485 Direction Pin",
    help    = "",
    width   = 1
  }
}

channels = {
  c_rx = {
    short = "RX channel",
    long  = "Channel for the client to receive RX data from the RS485 transceiver",
    help  = "",
  },
  c_tx = {
    short = "TX channel",
    long  = "Channel for the to send TX data to the RS485 transceiver",
    help  = "",
  },

}        

function getConfigStatus()
  local status = "Valid Configuration"
  local issues = {}
  return status, issues
end
            
-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------

generatedCode = {
  includes = { 
    "rs485.h"
  },
  globals = [[
    rs485_interface_t rs485${swblock.id}_if = { ${swblock.ports.p_rs485_data}, ${swblock.ports.p_rs485_dir}};
    rs485_config_t rs485${swblock.id}_config = {
      ${swblock.params.rs485DirBit},
      ${swblock.params.rs485InitialBaudRate},
      ${swblock.params.rs485DataBits},
      ${swblock.params.rs485InitialStopBits},
      ${swblock.params.rs485InitialParity},
      ${swblock.params.rs485DataTimeout}
    };
  ]],
  body = [[
    rs485_run(c_tx, c_rx, rs485${swblock.id}_if, rs485${swblock.id}_config);
  ]]
}

